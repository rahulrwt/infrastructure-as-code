name: Branch Deploy for Production

on:
  workflow_dispatch:

env:
  APP_NAME: trailAndtale

jobs:
  release-update:
    runs-on: ubuntu-latest
    outputs:
      PROD_VERSION: ${{ steps.get_version.outputs.VERSION }}
      SNAPSHOT_VERSION: ${{ steps.get_version.outputs.SNAPSHOT_VERSION }}
      PREVIOUS_VERSION: ${{ steps.previous_version.outputs.PREVIOUS_VERSION }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Extract and sanitize branch name
        id: extract_branch
        run: |
          BRANCH="${GITHUB_REF##*/}"
          # Replace slashes or unsafe characters in branch name with hyphens
          SAFE_BRANCH=$(echo "$BRANCH" | tr '/\_' '-' | tr -cd '[:alnum:]-')
          echo "BRANCH=$SAFE_BRANCH" >> $GITHUB_ENV
          
      - name: Get Current Release Version
        id: get_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name' | sed 's/^v//')
          if [[ "$VERSION" == "null" || -z "$VERSION" ]]; then
            VERSION="0.1.0"
          fi
          echo "SNAPSHOT_VERSION=$VERSION-${{ env.BRANCH }}" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Download Existing Release Versions JSON
        env:
          RELEASE_ARTIFACT_BUCKET: ${{ secrets.RELEASE_ARTIFACT_BUCKET }}
        run: |
          aws s3 cp s3://$RELEASE_ARTIFACT_BUCKET/release-versions.json ./release-versions.json || echo '{}' > release-versions.json

      - name: Get Previous Version
        id: previous_version
        run: |
          PREVIOUS_VERSION=$(jq -r '.'"${{ env.APP_NAME }}"' // "0.0.1"' release-versions.json)
          echo "PREVIOUS_VERSION=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT

      - name: Update Release Versions JSON
        run: |
          if ! aws s3 ls "s3://${{ secrets.RELEASE_ARTIFACT_BUCKET }}/${{ env.APP_NAME }}.${{ steps.get_version.outputs.SNAPSHOT_VERSION }}.jar" > /dev/null 2>&1; then
            echo "❌ ERROR: Release artifact ${{ env.APP_NAME }}-${{ steps.get_version.outputs.SNAPSHOT_VERSION }}.jar does not exist in S3!"
            exit 1
          fi 
          jq --arg version "${{ steps.get_version.outputs.SNAPSHOT_VERSION }}" '.'"${{ env.APP_NAME }}"' = $version' release-versions.json > temp.json && mv temp.json release-versions.json

      - name: Upload Updated Release Versions JSON to S3
        env:
          RELEASE_ARTIFACT_BUCKET: ${{ secrets.RELEASE_ARTIFACT_BUCKET }}
        run: |
          aws s3 cp release-versions.json s3://$RELEASE_ARTIFACT_BUCKET/release-versions.json

  asg-rolling-update:
    needs: release-update
    runs-on: ubuntu-latest
    outputs:
      CURRENT_MIN_COUNT: ${{ steps.get_asg_count.outputs.CURRENT_MIN_COUNT }}
      CURRENT_MAX_COUNT: ${{ steps.get_asg_count.outputs.CURRENT_MAX_COUNT }}
      CURRENT_DEFAULT_COUNT: ${{ steps.get_asg_count.outputs.CURRENT_DEFAULT_COUNT }}
      NEW_DEFAULT_COUNT: ${{ steps.get_asg_count.outputs.NEW_DEFAULT_COUNT }}
      ASG_NAME: ${{ steps.set_vars.outputs.ASG_NAME }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set Environment Variables
        id: set_vars
        env:
          AWS_ASG_NAME: ${{ secrets.ASG_NAME }}
        run: |
          echo "AWS_ASG_NAME=$AWS_ASG_NAME" >> $GITHUB_ENV
          echo "ASG_NAME=$AWS_ASG_NAME" >> $GITHUB_OUTPUT

      - name: Get Current ASG Instance Count
        id: get_asg_count
        run: |
          CURRENT_MIN_COUNT=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name "$AWS_ASG_NAME" --query "AutoScalingGroups[0].MinSize" --output text)
          CURRENT_MAX_COUNT=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name "$AWS_ASG_NAME" --query "AutoScalingGroups[0].MaxSize" --output text)
          CURRENT_DEFAULT_COUNT=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name "$AWS_ASG_NAME" --query "AutoScalingGroups[0].DesiredCapacity" --output text)

          NEW_DEFAULT_COUNT=$((CURRENT_DEFAULT_COUNT < 2 ? 2 : CURRENT_DEFAULT_COUNT * 2))
          NEW_MAX_COUNT=$((CURRENT_MAX_COUNT < NEW_DEFAULT_COUNT ? NEW_DEFAULT_COUNT : CURRENT_MAX_COUNT))
          NEW_MIN_COUNT=$CURRENT_MIN_COUNT
          
          echo "NEW_DEFAULT_COUNT=$NEW_DEFAULT_COUNT" >> $GITHUB_ENV
          echo "NEW_MAX_COUNT=$NEW_MAX_COUNT" >> $GITHUB_ENV
          echo "NEW_MIN_COUNT=$NEW_MIN_COUNT" >> $GITHUB_ENV
          echo "CURRENT_MIN_COUNT=$CURRENT_MIN_COUNT" >> $GITHUB_ENV
          echo "CURRENT_MAX_COUNT=$CURRENT_MAX_COUNT" >> $GITHUB_ENV
          echo "CURRENT_DEFAULT_COUNT=$CURRENT_DEFAULT_COUNT" >> $GITHUB_ENV

          # Set outputs for use in other jobs
          echo "CURRENT_MIN_COUNT=$CURRENT_MIN_COUNT" >> $GITHUB_OUTPUT
          echo "CURRENT_MAX_COUNT=$CURRENT_MAX_COUNT" >> $GITHUB_OUTPUT
          echo "CURRENT_DEFAULT_COUNT=$CURRENT_DEFAULT_COUNT" >> $GITHUB_OUTPUT
          echo "NEW_DEFAULT_COUNT=$NEW_DEFAULT_COUNT" >> $GITHUB_OUTPUT

          if [[ "$CURRENT_MIN_COUNT" -gt 6 || "$CURRENT_DEFAULT_COUNT" -gt 6 ]]; then
            echo "❌ ERROR: Scaling limits exceeded! Min Count: $CURRENT_MIN_COUNT, Default Count: $CURRENT_DEFAULT_COUNT"
            exit 1
          fi

      - name: Scale Up ASG
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name "$AWS_ASG_NAME" \
            --min-size $NEW_MIN_COUNT \
            --max-size $NEW_MAX_COUNT \
            --desired-capacity $NEW_DEFAULT_COUNT

      - name: Wait for New Instances to Be Healthy
        run: |
          TARGET_GROUP_ARN=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-name "$AWS_ASG_NAME" \
            --query "AutoScalingGroups[0].TargetGroupARNs[0]" --output text)

          if [[ "$TARGET_GROUP_ARN" == "None" || -z "$TARGET_GROUP_ARN" ]]; then
            echo "❌ ERROR: No Target Group ARN found for ASG $AWS_ASG_NAME!"
            exit 1
          fi

          for i in {1..20}; do
            HEALTHY_COUNT=$(aws autoscaling describe-auto-scaling-groups \
              --auto-scaling-group-name "$AWS_ASG_NAME" \
              --query "length(AutoScalingGroups[0].Instances[?LifecycleState=='InService'])" --output text)

            LB_HEALTHY_COUNT=$(aws elbv2 describe-target-health \
              --target-group-arn "$TARGET_GROUP_ARN" \
              --query "length(TargetHealthDescriptions[?TargetHealth.State=='healthy'])" --output text || echo 0)

            if [[ "$HEALTHY_COUNT" -ge "$NEW_DEFAULT_COUNT" && "$LB_HEALTHY_COUNT" -ge "$NEW_DEFAULT_COUNT" ]]; then
              echo "✅ All instances are healthy in both ASG and Load Balancer."
              break
            fi

            if [[ $i -eq 20 ]]; then
              echo "❌ ERROR: Instances did not become healthy in time!"
              exit 1
            fi

            echo "⏳ Waiting for instances to be healthy... Attempt ($i/20)"
            sleep 30
          done

      - name: Scale Down ASG to Original Count
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name "$AWS_ASG_NAME" \
            --min-size $CURRENT_MIN_COUNT \
            --max-size $CURRENT_MAX_COUNT \
            --desired-capacity $CURRENT_DEFAULT_COUNT

  rollback-release:
    needs: [release-update, asg-rolling-update]
    if: failure()
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.release-update.outputs.SNAPSHOT_VERSION }}
      PREVIOUS_VERSION: ${{ needs.release-update.outputs.PREVIOUS_VERSION }}
      RELEASE_ARTIFACT_BUCKET: ${{ secrets.RELEASE_ARTIFACT_BUCKET }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download Existing Release Versions JSON
        run: |
          aws s3 cp s3://$RELEASE_ARTIFACT_BUCKET/release-versions.json release-versions.json || echo "❌ ERROR: Failed to download release-versions.json"

      - name: Rollback to Previous Release Version
        run: |
          jq --arg previous_version "$PREVIOUS_VERSION" '.['"${{ env.APP_NAME }}"'] = $previous_version' release-versions.json > temp.json && mv temp.json release-versions.json

      - name: Upload Reverted Release Versions JSON
        run: |
          aws s3 cp release-versions.json s3://$RELEASE_ARTIFACT_BUCKET/release-versions.json

      - name: Print Rollback Error Message
        run: |
          echo "❌ ERROR: ASG update failed! Reverted to previous release version: ${{ env.PREVIOUS_VERSION }}"

  send-failure-notification:
    needs: [release-update, asg-rolling-update]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Send Email Notification on Deployment Failure
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.zoho.in
          server_port: 587
          username: ${{ secrets.NOTIFICATION_EMAIL }}
          password: ${{ secrets.NOTIFICATION_EMAIL_PASSWORD }}
          subject: "🚨 Production Branch Deployment Failed - Manual Cleanup Required"
          to: ${{ secrets.ALERT_EMAIL_RECIPIENTS }}
          from: ${{ secrets.NOTIFICATION_EMAIL }}
          body: |
            Production deployment has failed and requires immediate attention.
            
            📋 DEPLOYMENT DETAILS:
            - Repository: ${{ github.repository }}
            - Workflow: ${{ github.workflow }}
            - Run ID: ${{ github.run_id }}
            - Triggered by: ${{ github.actor }}
            - Attempted Version: ${{ needs.release-update.outputs.VERSION }}
            - Rollback Version: ${{ needs.release-update.outputs.PREVIOUS_VERSION }}
            
            ⚠️  CRITICAL ISSUE:
            ASG scaling operation failed during health checks. New instances may still be running and need manual cleanup.
            
            🔧 MANUAL CLEANUP REQUIRED:
            ASG Name: ${{ needs.asg-rolling-update.outputs.ASG_NAME }}
            Original Instance Count: ${{ needs.asg-rolling-update.outputs.CURRENT_DEFAULT_COUNT }}
            Current Instance Count: ${{ needs.asg-rolling-update.outputs.NEW_DEFAULT_COUNT }}
            
            Please manually scale down the ASG to the original count:
            aws autoscaling update-auto-scaling-group \
              --auto-scaling-group-name "${{ needs.asg-rolling-update.outputs.ASG_NAME }}" \
              --min-size ${{ needs.asg-rolling-update.outputs.CURRENT_MIN_COUNT }} \
              --max-size ${{ needs.asg-rolling-update.outputs.CURRENT_MAX_COUNT }} \
              --desired-capacity ${{ needs.asg-rolling-update.outputs.CURRENT_DEFAULT_COUNT }}
            
            🔗 WORKFLOW LINK:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ✅ ACTIONS COMPLETED:
            - Release version rolled back to: ${{ needs.release-update.outputs.PREVIOUS_VERSION }}
            - S3 release-versions.json updated
            
            ❌ ACTIONS NEEDED:
            - Investigate deployment failure root cause
            - Manually scale down ASG to original capacity
            - Verify application health before next deployment
            
            This is an automated alert from GitHub Actions.