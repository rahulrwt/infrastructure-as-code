name: Rollback to Second Last Version for Production

on:
  workflow_dispatch:

env:
  APP_NAME: trailAndTale

jobs:
  rollback-to-previous-version:
    runs-on: ubuntu-latest
    outputs:
      SECOND_LAST_VERSION: ${{ steps.extract_versions.outputs.SECOND_LAST_VERSION }}
      LATEST_VERSION: ${{ steps.extract_versions.outputs.LATEST_VERSION }}
    env:
      RELEASE_ARTIFACT_BUCKET: ${{ secrets.RELEASE_ARTIFACT_BUCKET }}
      AWS_ASG_NAME: ${{ secrets.ASG_NAME }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download Release Versions JSON
        run: |
          aws s3 cp s3://$RELEASE_ARTIFACT_BUCKET/release-versions.json ./release-versions.json || echo '{}' > release-versions.json

      - name: Get Last Two Release Versions
        id: extract_versions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSIONS=($(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.[].tag_name' | head -2))
          
          if [[ "${#VERSIONS[@]}" -lt 2 ]]; then
            echo "‚ùå ERROR: Not enough releases to roll back!" && exit 1
          fi

          echo "VERSIONS=${VERSIONS[@]}"
          echo "LATEST_VERSION=${VERSIONS[0]}"
          echo "SECOND_LAST_VERSION=${VERSIONS[1]}"
          echo "LATEST_VERSION=${VERSIONS[0]}" >> $GITHUB_OUTPUT
          echo "SECOND_LAST_VERSION=${VERSIONS[1]}" >> $GITHUB_OUTPUT

      - name: Rollback Release Versions JSON
        run: |
          jq --arg version "${{ steps.extract_versions.outputs.SECOND_LAST_VERSION }}" '.'\"${{ env.APP_NAME }}\"' = $version' release-versions.json > temp.json && mv temp.json release-versions.json
          echo "‚úÖ Successfully updated release-versions.json with second last version: ${{ steps.extract_versions.outputs.SECOND_LAST_VERSION }}"

      - name: Upload Updated Release Versions JSON
        run: |
          aws s3 cp release-versions.json s3://$RELEASE_ARTIFACT_BUCKET/release-versions.json

  asg-rolling-update:
    needs: rollback-to-previous-version
    runs-on: ubuntu-latest
    outputs:
      ASG_NAME: ${{ steps.set_vars.outputs.ASG_NAME }}
      CURRENT_MIN_COUNT: ${{ steps.get_asg_count.outputs.CURRENT_MIN_COUNT }}
      CURRENT_MAX_COUNT: ${{ steps.get_asg_count.outputs.CURRENT_MAX_COUNT }}
      CURRENT_DEFAULT_COUNT: ${{ steps.get_asg_count.outputs.CURRENT_DEFAULT_COUNT }}
      NEW_DEFAULT_COUNT: ${{ steps.get_asg_count.outputs.NEW_DEFAULT_COUNT }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set Environment Variables
        id: set_vars
        env:
          AWS_ASG_NAME: ${{ secrets.ASG_NAME }}
        run: |
          echo "AWS_ASG_NAME=$AWS_ASG_NAME" >> $GITHUB_ENV
          echo "ASG_NAME=$AWS_ASG_NAME" >> $GITHUB_OUTPUT

      - name: Get Current ASG Instance Count
        id: get_asg_count
        run: |
          CURRENT_MIN_COUNT=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name "$AWS_ASG_NAME" --query "AutoScalingGroups[0].MinSize" --output text)
          CURRENT_MAX_COUNT=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name "$AWS_ASG_NAME" --query "AutoScalingGroups[0].MaxSize" --output text)
          CURRENT_DEFAULT_COUNT=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name "$AWS_ASG_NAME" --query "AutoScalingGroups[0].DesiredCapacity" --output text)

          NEW_DEFAULT_COUNT=$((CURRENT_DEFAULT_COUNT < 2 ? 2 : CURRENT_DEFAULT_COUNT * 2))
          NEW_MAX_COUNT=$((CURRENT_MAX_COUNT < 2 ? 2 : CURRENT_MAX_COUNT * 2))
          NEW_MIN_COUNT=$((CURRENT_MIN_COUNT < 2 ? 2 : CURRENT_MIN_COUNT * 2))
          
          echo "NEW_DEFAULT_COUNT=$NEW_DEFAULT_COUNT" >> $GITHUB_ENV
          echo "NEW_MAX_COUNT=$NEW_MAX_COUNT" >> $GITHUB_ENV
          echo "NEW_MIN_COUNT=$NEW_MIN_COUNT" >> $GITHUB_ENV
          echo "CURRENT_MIN_COUNT=$CURRENT_MIN_COUNT" >> $GITHUB_ENV
          echo "CURRENT_MAX_COUNT=$CURRENT_MAX_COUNT" >> $GITHUB_ENV
          echo "CURRENT_DEFAULT_COUNT=$CURRENT_DEFAULT_COUNT" >> $GITHUB_ENV

          echo "CURRENT_MIN_COUNT=$CURRENT_MIN_COUNT" >> $GITHUB_OUTPUT
          echo "CURRENT_MAX_COUNT=$CURRENT_MAX_COUNT" >> $GITHUB_OUTPUT
          echo "CURRENT_DEFAULT_COUNT=$CURRENT_DEFAULT_COUNT" >> $GITHUB_OUTPUT
          echo "NEW_DEFAULT_COUNT=$NEW_DEFAULT_COUNT" >> $GITHUB_OUTPUT

          if [[ "$CURRENT_MIN_COUNT" -gt 6 || "$CURRENT_DEFAULT_COUNT" -gt 6 ]]; then
            echo "‚ùå ERROR: Scaling limits exceeded! Min Count: $CURRENT_MIN_COUNT, Default Count: $CURRENT_DEFAULT_COUNT"
            exit 1
          fi

      - name: Scale Up ASG
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name "$AWS_ASG_NAME" \
            --min-size $NEW_MIN_COUNT \
            --max-size $NEW_MAX_COUNT \
            --desired-capacity $NEW_DEFAULT_COUNT

      - name: Wait for New Instances to Be Healthy
        run: |
          TARGET_GROUP_ARN=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-name "$AWS_ASG_NAME" \
            --query "AutoScalingGroups[0].TargetGroupARNs[0]" --output text)

          if [[ "$TARGET_GROUP_ARN" == "None" || -z "$TARGET_GROUP_ARN" ]]; then
            echo "‚ùå ERROR: No Target Group ARN found for ASG $AWS_ASG_NAME!"
            exit 1
          fi

          for i in {1..20}; do
            HEALTHY_COUNT=$(aws autoscaling describe-auto-scaling-groups \
              --auto-scaling-group-name "$AWS_ASG_NAME" \
              --query "length(AutoScalingGroups[0].Instances[?LifecycleState=='InService'])" --output text)

            LB_HEALTHY_COUNT=$(aws elbv2 describe-target-health \
              --target-group-arn "$TARGET_GROUP_ARN" \
              --query "length(TargetHealthDescriptions[?TargetHealth.State=='healthy'])" --output text || echo 0)

            if [[ "$HEALTHY_COUNT" -ge "$NEW_DEFAULT_COUNT" && "$LB_HEALTHY_COUNT" -ge "$NEW_DEFAULT_COUNT" ]]; then
              echo "‚úÖ All instances are healthy in both ASG and Load Balancer."
              break
            fi

            if [[ $i -eq 20 ]]; then
              echo "‚ùå ERROR: Instances did not become healthy in time!"
              exit 1
            fi

            echo "‚è≥ Waiting for instances to be healthy... Attempt ($i/20)"
            sleep 30
          done

      - name: Scale Down ASG to Original Count
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name "$AWS_ASG_NAME" \
            --min-size $CURRENT_MIN_COUNT \
            --max-size $CURRENT_MAX_COUNT \
            --desired-capacity $CURRENT_DEFAULT_COUNT
    
      - name: Print Rollback Completion Message
        run: |
          echo "‚úÖ Successfully rolled back to second last version: ${{ needs.rollback-to-previous-version.outputs.SECOND_LAST_VERSION }}"

  send-failure-notification:
    needs: [rollback-to-previous-version, asg-rolling-update]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Send Email Notification on Deployment Failure
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.zoho.in
          server_port: 587
          username: ${{ secrets.NOTIFICATION_EMAIL }}
          password: ${{ secrets.NOTIFICATION_EMAIL_PASSWORD }}
          subject: "üö® Production Rollback Deployment Failed - Manual Cleanup Required"
          to: ${{ secrets.ALERT_EMAIL_RECIPIENTS }}
          from: ${{ secrets.NOTIFICATION_EMAIL }}
          body: |
            Production rollback has failed and requires immediate attention.
            
            üìã ROLLBACK DETAILS:
            - Repository: ${{ github.repository }}
            - Workflow: ${{ github.workflow }}
            - Run ID: ${{ github.run_id }}
            - Triggered by: ${{ github.actor }}
            - Latest Version: ${{ needs.rollback-to-previous-version.outputs.LATEST_VERSION }}
            - Rollback Version: ${{ needs.rollback-to-previous-version.outputs.SECOND_LAST_VERSION }}
            
            ‚ö†Ô∏è  CRITICAL ISSUE:
            ASG scaling operation failed during health checks. New instances may still be running and need manual cleanup.
            
            üîß MANUAL CLEANUP REQUIRED:
            ASG Name: ${{ needs.asg-rolling-update.outputs.ASG_NAME }}
            Original Instance Count: ${{ needs.asg-rolling-update.outputs.CURRENT_DEFAULT_COUNT }}
            Current Instance Count: ${{ needs.asg-rolling-update.outputs.NEW_DEFAULT_COUNT }}
            
            Please manually scale down the ASG to the original count:
            aws autoscaling update-auto-scaling-group \
              --auto-scaling-group-name "${{ needs.asg-rolling-update.outputs.ASG_NAME }}" \
              --min-size ${{ needs.asg-rolling-update.outputs.CURRENT_MIN_COUNT }} \
              --max-size ${{ needs.asg-rolling-update.outputs.CURRENT_MAX_COUNT }} \
              --desired-capacity ${{ needs.asg-rolling-update.outputs.CURRENT_DEFAULT_COUNT }}
            
            üîó WORKFLOW LINK:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ‚úÖ ACTIONS COMPLETED:
            - Release version rolled back to: ${{ needs.rollback-to-previous-version.outputs.SECOND_LAST_VERSION }}
            - S3 release-versions.json updated
            
            ‚ùå ACTIONS NEEDED:
            - Investigate rollback failure root cause
            - Manually scale down ASG to original capacity
            - Verify application health before next deployment
            
            This is an automated alert from GitHub Actions.